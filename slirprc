% Midnight Commander - SLIRP configuration file
%
% Copyright (C) 2021
% The Free Software Foundation, Inc.
%
% Written by:
%  Sebastian Gniazdowski <sgniazdowski@gmail.com>, 2021
%
% This file is part of the Midnight Commander.
%
% The Midnight Commander is free software: you can redistribute it
% and/or modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation, either version 3 of the License,
% or (at your option) any later version.
%
% The Midnight Commander is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

%*** main code *********************************************************

% Automatically fill `size` argument with the size ($1_dim'ension) of the `items`.
#argmap (in,which=1) (char **items, unsigned long size)
   $2 = ($2_type) $1_dim1;
#end

% Same for other array/size pair.
#argmap (in,which=1) (char **data, unsigned long size2)
   $2 = ($2_type) $1_dim1;
#end

% Ignore symbols, i.e.: do not export them to S-Lang interpreter.
#ignore
    MC__SLANG_API_FUNCTIONS_H
#end

% Remove the unwanted function name prefixes from S-Lang exported functions.
% Not working, have to use the command line -rename option as it understands `NULL`.
%#rename slang_api__ NULL
%#rename keybind_ NULL

%slirp_map_struct("Multi_Type_Action_Data*");



% Allow a function (action()) to be called with either string or an integer as its first
% argument and omit the last two. String is an action name (like "EditFile"), while integer
% is the CK_ enum code.
#argmap(in, which=1, proxy=SLang_Array_Type) (void *ARRAY_2_VOIDP, char *action_name, long action_code, Multi_Type_Action_Data *data)
    {
        /* Prepare an unfilled call data structure instance */
        Multi_Type_Action_Data parm_data = {0};

        /* Called with string argument? */
        if (proxy->data_type == SLANG_STRING_TYPE) {
            $2 = *((char**)proxy->data);
            $3 = -1;
        } else {
            /* It's certain that no string will be passed. */
            $2 = NULL;
            /* Called with a long argument? */
            if (proxy->data_type == SLANG_LONG_TYPE)
                $3 = *((long*)proxy->data);
            /* Called with an integer argument? */
            else if (proxy->data_type == SLANG_INT_TYPE)
                $3 = *((int*)proxy->data);
            /* Unknown type passed as argument â€“ signal/mark the error with a special value. */
            else
                $3 = 0xbadc0de;
        }
        /*
         * The first parameter is only a placeholder of the void * arbitrary type argument
         * on S-Lang side, it's unused on C side.
         */
        $1 = 0;

        $4 = NULL;

        /* Get any parametrizing data from qualifiers */
        if (SLang_qualifier_exists("param")) {
            long qual_long = LONG_MAX;
            SLang_get_long_qualifier("param", &qual_long, LONG_MAX);
            if (qual_long != LONG_MAX)
            {
                parm_data.type = Multi_Type_Long;
                parm_data.param = qual_long;
                $4 = &parm_data;
            }
        }

        if (SLang_qualifier_exists("data")) {
            char *qual_str = NULL;
            SLang_get_string_qualifier("data", &qual_str, NULL);
            if (qual_str != NULL)
            {
                parm_data.type = Multi_Type_String;
                parm_data.string = qual_str;
                $4 = &parm_data;
            }
        }
    }
#end

